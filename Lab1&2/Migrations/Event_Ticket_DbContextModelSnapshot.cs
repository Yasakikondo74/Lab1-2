// <auto-generated />
using System;
using Lab1_2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab1_2.Migrations
{
    [DbContext(typeof(Event_Ticket_DbContext))]
    partial class Event_Ticket_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab1_2.Models.TheEvent", b =>
                {
                    b.Property<Guid>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.ToTable("theEvents");
                });

            modelBuilder.Entity("Lab1_2.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TheEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketID");

                    b.HasIndex("TheEventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Lab1_2.Models.Ticket", b =>
                {
                    b.HasOne("Lab1_2.Models.TheEvent", "TheEvent")
                        .WithMany("Tickets")
                        .HasForeignKey("TheEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheEvent");
                });

            modelBuilder.Entity("Lab1_2.Models.TheEvent", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
